// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dalbers.podcastexplorer.dagger;

import com.dalbers.podcastexplorer.contracts.SearchContract;
import com.dalbers.podcastexplorer.data.PodcastMediaPlayer;
import com.dalbers.podcastexplorer.search.SearchController;
import com.dalbers.podcastexplorer.search.SearchController_MembersInjector;

import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerPodcastFinder implements PodcastFinder {
  private Provider<PodcastMediaPlayer> mediaPlayerProvider;

  private Provider<SearchContract.Model> modelProvider;

  private Provider<SearchContract.Presenter> providePresenterProvider;

  private MembersInjector<SearchController> searchControllerMembersInjector;

  private DaggerPodcastFinder(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.mediaPlayerProvider =
        new Factory<PodcastMediaPlayer>() {
          private final DataComponent dataComponent = builder.dataComponent;

          @Override
          public PodcastMediaPlayer get() {
            return Preconditions.checkNotNull(
                dataComponent.mediaPlayer(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.modelProvider =
        new Factory<SearchContract.Model>() {
          private final DataComponent dataComponent = builder.dataComponent;

          @Override
          public SearchContract.Model get() {
            return Preconditions.checkNotNull(
                dataComponent.model(), "Cannot return null from a non-@Nullable component method");
          }
        };

    this.providePresenterProvider =
        PresenterModule_ProvidePresenterFactory.create(
            builder.presenterModule, mediaPlayerProvider, modelProvider);

    this.searchControllerMembersInjector =
        SearchController_MembersInjector.create(providePresenterProvider);
  }

  @Override
  public void inject(SearchController controller) {
    searchControllerMembersInjector.injectMembers(controller);
  }

  public static final class Builder {
    private PresenterModule presenterModule;

    private DataComponent dataComponent;

    private Builder() {}

    public PodcastFinder build() {
      if (presenterModule == null) {
        throw new IllegalStateException(PresenterModule.class.getCanonicalName() + " must be set");
      }
      if (dataComponent == null) {
        throw new IllegalStateException(DataComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerPodcastFinder(this);
    }

    public Builder presenterModule(PresenterModule presenterModule) {
      this.presenterModule = Preconditions.checkNotNull(presenterModule);
      return this;
    }

    public Builder dataComponent(DataComponent dataComponent) {
      this.dataComponent = Preconditions.checkNotNull(dataComponent);
      return this;
    }
  }
}
