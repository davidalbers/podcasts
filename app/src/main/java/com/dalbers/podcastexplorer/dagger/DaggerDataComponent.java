// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dalbers.podcastexplorer.dagger;

import com.dalbers.podcastexplorer.contracts.SearchContract;
import com.dalbers.podcastexplorer.data.PodcastMediaPlayer;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerDataComponent implements DataComponent {
  private Provider<SearchContract.Model> provideModelProvider;

  private Provider<PodcastMediaPlayer> provideMediaPlayerProvider;

  private DaggerDataComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static DataComponent create() {
    return builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideModelProvider =
        DoubleCheck.provider(DataModule_ProvideModelFactory.create(builder.dataModule));

    this.provideMediaPlayerProvider =
        DoubleCheck.provider(DataModule_ProvideMediaPlayerFactory.create(builder.dataModule));
  }

  @Override
  public SearchContract.Model model() {
    return provideModelProvider.get();
  }

  @Override
  public PodcastMediaPlayer mediaPlayer() {
    return provideMediaPlayerProvider.get();
  }

  public static final class Builder {
    private DataModule dataModule;

    private Builder() {}

    public DataComponent build() {
      if (dataModule == null) {
        this.dataModule = new DataModule();
      }
      return new DaggerDataComponent(this);
    }

    public Builder dataModule(DataModule dataModule) {
      this.dataModule = Preconditions.checkNotNull(dataModule);
      return this;
    }
  }
}
